# vi: ft=zsh

title()           { printf "\033k%s\033\\" "$1" }
path_prepend()    { path=("$1" $path) }
manpath_prepend() { manpath=("$1" $manpath) }
java-opt()        { JAVA_TOOL_OPTIONS="$1 $JAVA_TOOL_OPTIONS" }
maven-opt()       { MAVEN_OPTS="$1 $MAVEN_OPTS" }
path()            { echo "$PATH" | tr : $'\n' }
fpath()           { echo $fpath | tr ' ' $'\n' }
manpath()         { echo $manpath | tr ' ' $'\n' }
fakeaws()         { export AWS_ACCESS_KEY_ID=1; export AWS_SECRET_ACCESS_KEY=1 }
jars-in-war()     { unzip -l ./*-war/target/*-SNAPSHOT.war | grep jar | awk -F '/' '{print $3}' | sort -u }
httprb()          { ruby -run -e httpd . -p "${1:-1090}" }

sans() {
  openssl s_client -connect "$1:443" 2>/dev/null </dev/null \
    | openssl x509 -noout -text \
    | grep -A1 'Subject Alternative Name' \
    | sed -e 's/DNS:/\'$'\n/g' \
    | sed '1,2d' \
    | sed -e 's/,//g' \
    | sort -u
}

denv() {
  local -r MACHINE="${1:-default}"
  eval "$(docker-machine env "$MACHINE")"
}

apt-purge-old-kernels() {
  echo 'Current: '$(uname -r) \
    && dpkg -l 'linux-*' \
    | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
    | xargs sudo apt-get -y purge
}

brews() {
  brew list | while read cask; do \
    echo -n $fg[blue] $cask $fg[white]
    brew deps $cask \
      | awk '{printf(" %s ", $0)}'
    echo ""
  done
}

brews-used() {
  brew list | while read cask; do \
    echo -n $fg[blue] $cask $fg[white]
    brew uses --installed $cask \
      | awk '{printf(" %s ", $0)}'
    echo ""
  done
}

function start-ssh-agent {
  ssh-agent \
    | sed 's/^echo/#echo/' \
    > "${SSH_ENV}"
  chmod 600 "${SSH_ENV}"
  source "${SSH_ENV}" \
    > /dev/null
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -${1:-9} $pid
  fi
}

# fbr - checkout git branch (including remote branches)
br() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
co() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fcoc - checkout git commit
coc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow - git commit browser
show() {
  local out sha q
  while out=$(
      git log --decorate=short --graph --oneline --color=always |
      fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
    q=$(head -1 <<< "$out")
    while read sha; do
      [ -n "$sha" ] && git show --color=always $sha | less -R
    done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
  done
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# ftpane - switch pane
ftpane () {
  local panes current_window target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_window=$(tmux display-message  -p '#I')

  target=$(echo "$panes" | fzf) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

d() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _z "$@"
  fi
  pwd
}

zcompile-all() {
  zcompile \
    '.zshrc' \
    '.zshenv' \
    '.zprofile' \
    '.functions' \
    '.aliases' \
    '.path'
}
