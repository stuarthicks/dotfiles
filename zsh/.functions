# vi: ft=zsh

path_prepend()    { path=("$1" $path) }
manpath_prepend() { manpath=("$1" $manpath) }
path()            { echo "$PATH" | tr : $'\n' }
fpath()           { echo $fpath | tr ' ' $'\n' }
manpath()         { echo $manpath | tr ' ' $'\n' }
httprb()          { ruby -run -e httpd . -p "${1:-1090}" }

rbenv() {
    eval "$(command rbenv init --no-rehash - zsh)"
    rbenv "$@"
}

plenv() {
    eval "$(command plenv init --no-rehash - zsh)"
    plenv "$@"
}

pyenv() {
    eval "$(command pyenv init --no-rehash - zsh)"
    eval "$(command pyenv virtualenv-init --no-rehash - zsh)"
    pyenv "$@"
}

javav() {
  export JAVA_HOME=$(/usr/libexec/java_home -v "$1")
  path_prepend "$JAVA_HOME/bin"
  path=($^path(N)) && typeset -U PATH
  echo "JAVA_HOME is $JAVA_HOME"
}

apt-purge-old-kernels() {
  echo 'Current: '$(uname -r) \
    && dpkg -l 'linux-*' \
    | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
    | xargs sudo apt-get -y purge
}

brews() {
  brew list | while read cask; do \
    if [ -t 1 ]; then
      echo -n $fg[blue] $cask $fg[white]
    else
      echo -n $cask
    fi
    brew deps $cask \
      | awk '{printf(" %s ", $0)}'
    echo ""
  done
}

brews-used() {
  brew list | while read cask; do \
    if [ -t 1 ]; then
      echo -n $fg[blue] $cask $fg[white]
    else
      echo -n $cask
    fi
    brew uses --installed $cask \
      | awk '{printf(" %s ", $0)}'
    echo ""
  done
}

function start-ssh-agent {
  rm -f "$SSH_ENV"
  ssh-agent > "$SSH_ENV"
  chmod 600 "$SSH_ENV"
  source "$SSH_ENV" > /dev/null 2>&1
}

f() {
  ${VISUAL:-nvim} "$(pt --nocolor -g "" | fzf)"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -${1:-9} $pid
  fi
}

# fbr - checkout git branch (including remote branches)
br() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

d() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _z "$@"
  fi
  pwd
}

_fzf_compgen_path() {
  pt --nocolor -g "" "$1"
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    kill -9 %+
    zle redisplay
  else
    zle push-input
  fi
}

focus-on-something () {
  BUFFER='FOCUS="!!"'
  zle expand-history
  zle end-of-line
  zle accept-line
}

do-something () {
   if  [ -n "$FOCUS" ];           then BUFFER="$FOCUS"
  elif [ -f "configure" ];        then BUFFER="./configure && make"
  elif [ -f "CMakeLists.txt" ];   then BUFFER="mkdir cmakebuild && cd cmakebuild && cmake .. && make"
  elif [ -f "Makefile" ];         then BUFFER="make"
  elif [ -f "build" ];            then BUFFER="./build"
  elif [ -f "build.sh" ];         then BUFFER="./build.sh"
  elif [ -f "test" ];             then BUFFER="./test"
  elif [ -f "test.sh" ];          then BUFFER="./test.sh"
  elif [ -f "pom.xml" ];          then BUFFER="mvn clean install"
  elif [ -f "Gemfile" ];          then BUFFER="bundle install"
  elif [ -f "Cargo.toml" ];       then BUFFER="cargo build"
  elif [ -f "gradlew" ];          then BUFFER="./gradlew"
  elif [ -d "requirements.txt" ]; then BUFFER="pip install -r requirements.txt"
  elif [ -d "node_modules" ];     then BUFFER="npm test"
  fi
  zle end-of-line
  zle accept-line
}

man() {
    env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

zom() {
  (
    cd && \
    zcompile \
      '.zshrc' \
      '.zshenv' \
      '.zprofile' \
      '.functions' \
      '.aliases'
    )
}
